name: Publish Prerelease

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  Publish-prerelease:
    if: contains(github.head_ref, 'alpha') || contains(github.head_ref, 'beta') || contains(github.head_ref, 'prerelease')
    runs-on: ubuntu-latest

    env:
      PROJECT_PATH: ./Uruba.Distancias/*.csproj
      PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output

    steps: 
    - name: Checkout
      uses: actions/checkout@v3
      with:
        # Fetch all commits
        fetch-depth: 0

    - name: Setup .NET 5
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '5.0.x'

    - name: Find the specific suffix to compose the version format
      uses: tiagomartimiano/github-find-prerelease-suffix-action@v1.0.0
      with:
        name-branch: ${{ github.head_ref }}
    
    - name: Semantic versioning
      id: versioning
      uses: PaulHatch/semantic-version@v4.0.2
      with:
        tag_prefix: ''
        major_pattern: "break:"
        minor_pattern: "feat:"
        patch_pattern: "fix:"
        format: "${major} ${minor}.${patch}-${{ env.PRERELEASE }}${increment}"

    - name: Build Project and Generate Package
      run: dotnet build ${{ env.PROJECT_PATH }} -c Release -p:PackageVersion=${{ steps.versioning.outputs.version }} -o ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: Print Workspace Content
      run: |
        cd ${{ github.workspace }}
        ls -lha
        
    - name: Push Package on NuGet
      run: dotnet nuget push '${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg' --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ secrets.NUGET_SERVER }} --skip-duplicate
    
    - name: Create Release
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        tag_name: ${{ steps.versioning.outputs.version }}
        release_name: ${{ steps.versioning.outputs.version }}
        prerelease: true
